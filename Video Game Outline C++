#include <iostream>
#include <string>
#include <stdlib.h>

using namespace std;
string username {"Username"};
string password {"Password"};
//Player Initialization
int player_strength{1};
int player_intelligence{1};
int player_agility{1};
int player_charisma{1};
int trait_points{0};
int allocation1{0};
int allocation2{0};
int allocation3{0};
int allocation4{0};
int player_rank{1};

//Save Initialization
string save_file1{"Empty"};
string save_file2{"Empty"};
string save_file3{"Empty"};

//Settings Initialization
int general_sensitivity{100};
int scoped_sensitivity{60};
string resolution{"1920 x 1080"};
string display_preference{"Fullscreen"};
int main_volume{100};
int music_volume{100};
int soundfx_volume{100};


int main() 
{
    srand (time(NULL));
    //Main Menu
    cout << "Welcome to the game!" << endl;
    cout << "Press [ENTER] To Begin" << endl;
    cin.get();
    cout << endl;
    
    //Menu Selections
    menu:
    cout << "***************" << endl;
    cout << "*[1] New Game *" << endl;
    cout << "*[2] Load Game*" << endl;
    cout << "*[3] Settings *" << endl;
    cout << "*[4] Credits  *" << endl;
    cout << "***************" << endl;
    int menuselection{0};
    cin >> menuselection;
    
    //New Game
    if (menuselection == 1) 
    {
        cout << "New Game Selected." << endl;

        //Player Creation
        player_creation:
        string character_name;
        cout << "Enter your character's name: ";
        cin >> character_name;
        cout << "Character name set to " << character_name << "." <<endl;
        cout << "Now set character traits: " << endl;
        trait_points = trait_points + 10;
        cout << "Trait points remaining: " << trait_points << endl;
        cout << "Strength: " << player_strength << endl;
        cout << "Intelligence: " << player_intelligence << endl;
        cout << "Agility: " << player_agility << endl;
        cout << "Charisma: " << player_charisma << endl;
        
        if (trait_points > 0)
        {
            cout << "How many points would you like to allocate to Strength?" << endl;
            cin >> allocation1;
            player_strength = player_strength + allocation1;
            if (allocation1 > trait_points || trait_points - allocation1 < 0)
            {
                cout << "Invalid Allocation" << endl;
            }
            else
            {
            trait_points = trait_points - allocation1;
            cout << "Your Strength is now: " << player_strength << endl;
            cout << "Trait points remaining: " << trait_points << endl;
            }
        }
        if (trait_points > 0)
        {
            cout << "How many points would you like to allocate to Intelligence?" << endl;
            cin >> allocation2;
            player_intelligence = player_intelligence + allocation2;
            if (allocation2 > trait_points || trait_points - allocation2 < 0)
            {
                cout << "Invalid Allocation" << endl;
            }
            else
            {
            trait_points = trait_points - allocation2;
            cout << "Your Intelligence is now: " << player_intelligence << endl;
            cout << "Trait points remaining: " << trait_points << endl;
            }
        }
        if (trait_points > 0)
        {
            cout << "How many points would you like to allocate to Agility?" << endl;
            cin >> allocation3;
            player_agility = player_agility + allocation3;
            if (allocation3 > trait_points || trait_points - allocation3 < 0)
            {
                cout << "Invalid Allocation" << endl;
            }
            else
            {
            trait_points = trait_points - allocation3;
            cout << "Your Agility is now: " << player_agility << endl;
            cout << "Trait points remaining: " << trait_points << endl;
            }
        }
        if (trait_points > 0)
        {
            cout << "How many points would you like to allocate to Charisma?" << endl;
            cin >> allocation4;
            player_charisma = player_charisma + allocation4;
            if (allocation4 > trait_points || trait_points - allocation4 < 0)
            {
                cout << "Invalid Allocation" << endl;
            }
            else
            {
            trait_points = trait_points - allocation4;
            cout << "Your Charisma is now: " << player_charisma << endl;
            cout << "Trait points remaining: " << trait_points << endl;
            }
        }
        cout << "Your traits are now:" << endl;
        cout << "Strength: " << player_strength << endl;
        cout << "Intelligence: " << player_intelligence << endl;
        cout << "Agility: " << player_agility << endl;
        cout << "Charisma: " << player_charisma << endl;
        cout << endl;
        
        save_option:
        cout << "Would you like to save your character? (y/n)" << endl;
        char save_yn;
        cin >> save_yn;
        if (save_yn == 'y' || save_yn == 'Y')
        {
            cout << "Choose a slot to save: (1, 2, 3) " << endl;
            cout << "Slot 1: " << save_file1 << endl;
            cout << "Slot 2: " << save_file2 << endl;
            cout << "Slot 3: " << save_file3 << endl;
            int save_selection{0};
            cin >> save_selection;
            if (save_selection == 1)
            {
               cout << "Name your save file: ";
                cin >> save_file1;
                cout << "Your save file has been created." << endl;
                cout << "Would you like to start your journey? (y/n)" << endl;
                char journey_start;
                cin >> journey_start;
                if (journey_start == 'y' || journey_start == 'Y')
                {
                    goto game_start;
                }
                if (journey_start != 'y' && journey_start != 'Y')
                {
                    goto menu;
                }
            }
            if (save_selection == 2)
            {
               cout << "Name your save file: ";
                cin >> save_file2;
                cout << "Your save file has been created." << endl;
                cout << "Would you like to start your journey? (y/n)" << endl;
                char journey_start;
                cin >> journey_start;
                if (journey_start == 'y' || journey_start == 'Y')
                {
                    goto game_start;
                }
                if (journey_start != 'y' && journey_start != 'Y')
                {
                    goto menu;
                }
            }
            if (save_selection == 3)
            {
               cout << "Name your save file: ";
                cin >> save_file3;
                cout << "Your save file has been created." << endl;
                cout << "Would you like to start your journey? (y/n)" << endl;
                char journey_start;
                cin >> journey_start;
                if (journey_start == 'y' || journey_start == 'Y')
                {
                    goto game_start;
                }
                if (journey_start != 'y' && journey_start != 'Y')
                {
                    goto menu;
                }
            }
            
        }
        if (save_yn == 'n' || save_yn == 'N')
        {
            player_charisma = 1;
            player_agility = 1;
            player_intelligence = 1;
            player_strength = 1;
            goto player_creation;
        }
        if (save_yn != 'y' && save_yn != 'Y' && save_yn != 'n' && save_yn != 'N')
        {
            cout << "That is not a valid option." << endl;
            goto save_option;
        }
    
    }
    
    
    //Load
    if (menuselection == 2) 
    { 
        cout << "Load Game Selected." << endl;
        cout << endl;
        load_menu:
        cout << "***************" << endl;
        cout << "Available files:" << endl;
        cout << "Slot 1: " << save_file1 << endl;
        cout << "Slot 2: " << save_file2 << endl;
        cout << "Slot 3: " << save_file3 << endl;
        cout << "***************" << endl;
        cout << endl;
        cout << "Choose a save file (1, 2, 3): " << endl;
        int load_selection{0};
        cin >> load_selection;
        if (load_selection == 1)
        {
            if (save_file1 == "Empty")
            {
                cout << "Save file is empty." << endl;
                cout << endl;
                goto menu;
            }
            else
            {
                cout << save_file1 << " selected." << endl;
            }
            
        }
        if (load_selection == 2)
        {
            if (save_file2 == "Empty")
            {
                cout << "Save file is empty." << endl;
                cout << endl;
                goto menu;
            }
            else
            {
                cout << save_file2 << " selected." << endl;
            }
            
        }
        if (load_selection == 3)
        {
            if (save_file3 == "Empty")
            {
                cout << "Save file is empty." << endl;
                cout << endl;
                goto menu;
            }
            else
            {
                cout << save_file3 << " selected." << endl;
            }
        }
        if (load_selection < 1 || load_selection > 3)
        {
            cout << "Invalid Selection." << endl;
            goto load_menu;
        }
    }
    
    //Settings
    if (menuselection == 3) 
    {
        all_settings:
        cout << "***************" << endl;
        cout << "All Settings" << endl;
        cout << "(1) Game" << endl;
        cout << "(2) Controls" << endl;
        cout << "(3) Display" << endl;
        cout << "(4) Audio" << endl;
        cout << endl;
        cout << "(5) Exit" << endl;
        cout << "***************" << endl;
        int settings_selection{0};
        cin >> settings_selection;
        if (settings_selection == 1)
        {
            cout << "***************" << endl;
            cout << "Game Settings Selected." << endl;
            game_settings:
            cout << "(1) Difficulty" << endl;
            cout << "(2) Subtitles" << endl;
            cout << "(3) ----" << endl;
            cout << "(4) ----" << endl;
            cout << endl;
            cout << "(5) Exit" << endl;
            cout << "***************" << endl;
            int game_settings_selection{0};
            cin >> game_settings_selection;
            if (game_settings_selection == 1)
            {
                cout << "***************" << endl;
                cout << "Select a Difficulty:" << endl;
                cout << "(1) Easy" << endl;
                cout << "(2) Medium" << endl;
                cout << "(3) Hard" << endl;
                cout << endl;
                cout << "(4) Exit" << endl;
                cout << "***************" << endl;
                int difficulty_selection{0};
                cin >> difficulty_selection;
                if (difficulty_selection == 1)
                {
                    cout << "Difficulty set to easy." << endl;
                    goto game_settings;
                }
                if (difficulty_selection == 2)
                {
                    cout << "Difficulty set to medium." << endl;
                    goto game_settings;
                }
                if (difficulty_selection == 3)
                {
                    cout << "Difficulty set to hard." << endl;
                    goto game_settings;
                }
                if (difficulty_selection == 4)
                {
                    goto game_settings;
                }
                if (difficulty_selection < 1 || difficulty_selection > 4)
                {
                    goto game_settings;
                }
            }
            if (game_settings_selection == 2)
            {
                cout << "***************" << endl;
                cout << "Select Subtitle Preference:" << endl;
                cout << "(1) On" << endl;
                cout << "(2) Off" << endl;
                cout << endl;
                cout << "(3) Exit" << endl;
                cout << "***************" << endl;
                int subtitles_selection{0};
                cin >> subtitles_selection;
                if (subtitles_selection == 1)
                {
                    cout << "Subtitles Enabled." << endl;
                    goto game_settings;
                }
                if (subtitles_selection == 2)
                {
                    cout << "Subtitles Disabled." << endl;
                    goto game_settings;
                }
                if (subtitles_selection == 3)
                {
                    goto all_settings;
                }
                if (subtitles_selection < 1 || subtitles_selection > 3)
                {
                    cout << "Invalid Selection." << endl;
                    goto game_settings;
                }
            }
            if (game_settings_selection == 3)
            {
                cout << "NOTHING HAS BEEN ADDED YET" << endl;
                goto game_settings;
            }
            if (game_settings_selection == 4)
            {
                cout << "NOTHING HAS BEEN ADDED YET" << endl;
                goto game_settings;
            }
            if (game_settings_selection == 5 || game_settings_selection < 1 || game_settings_selection > 5)
            {
                goto all_settings;
            }
        }
        if (settings_selection == 2)
        {
            cout << "***************" << endl;
            cout << "Controls Settings Selected." << endl;
            //Insert settings options as needed
            controls_settings:
            cout << "(1) Key Binds" << endl;
            cout << "(2) Sensitivity" << endl;
            cout << "(3) ----" << endl;
            cout << "(4) ----" << endl;
            cout << endl;
            cout << "(5) Exit" << endl;
            cout << "***************" << endl;
            int controls_settings_selection{0};
            cin >> controls_settings_selection;
            if (controls_settings_selection == 1)
            {
                key_bind_settings:
                string jump{"SPACE"};
                string attack{"Mouse 1"};
                string duck{"left ALT"};
                string forward{'W'};
                string backward{'S'};
                string left{'A'};
                string right{'D'};
                cout << "***************" << endl;
                cout << "Key Bind Settings" << endl;
                cout << "(1) Jump: " << jump << endl;
                cout << "(2) Attack: " << attack << endl;
                cout << "(3) Duck: " << duck << endl;
                cout << "(4) Forward: " << forward << endl;
                cout << "(5) Backward: " << backward << endl;
                cout << "(6) Left: " << left << endl;
                cout << "(7) Right: " << right << endl;
                cout << endl;
                cout << "(8) Exit" << endl;
                cout << "***************" << endl;
                int key_bind_selection{0};
                cin >> key_bind_selection;
                if (key_bind_selection == 1)
                {
                    cout << "Jump is currently set to: " << jump << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> jump;
                    cout << "Jump has been remapped to: " << jump << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 2)
                {
                    cout << "Attack is currently set to: " << attack << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> attack;
                    cout << "Attack has been remapped to: " << attack << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 3)
                {
                    cout << "Duck is currently set to: " << duck << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> duck;
                    cout << "Duck has been remapped to: " << duck << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 4)
                {
                    cout << "Forward is currently set to: " << forward << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> forward;
                    cout << "Forward has been remapped to: " << forward << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 5)
                {
                    cout << "Backward is currently set to: " << backward << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> backward;
                    cout << "Backward has been remapped to: " << backward << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 6)
                {
                    cout << "Left is currently set to: " << left << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> left;
                    cout << "Left has been remapped to: " << left << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 7)
                {
                    cout << "Right is currently set to: " << right << endl;
                    cout << "Enter a new key mapping: " << endl;
                    cin >> right;
                    cout << "Right has been remapped to: " << right << endl;
                    goto key_bind_settings;
                }
                if (key_bind_selection == 8)
                {
                    goto controls_settings;
                }
                if (key_bind_selection < 1 || key_bind_selection > 7)
                {
                    cout << "Invalid Selection." << endl;
                    goto key_bind_settings;
                }
            }
            if (controls_settings_selection == 2)
            {
                sensitivity_settings:
                cout << "***************" << endl;
                cout << "Sensitivity Settings" << endl;
                cout << "(1) General Sensitivity: " << general_sensitivity << endl;
                cout << "(2) Scoped Sensitivity: " << scoped_sensitivity << endl;
                cout << endl;
                cout << "(3) Exit" << endl;
                cout << "***************" << endl;
                int sensitivity_selection{0};
                cin >> sensitivity_selection;
                if (sensitivity_selection == 1)
                {
                    general_sensitivity_selection:
                    cout << "Set a new sensitivity (1-200): " << endl;
                    cin >> general_sensitivity;
                    if (general_sensitivity > 0 && general_sensitivity < 200)
                    {
                        cout << "General Sensitivity set to: " << general_sensitivity << endl;
                        goto sensitivity_settings;    
                    }
                    else 
                    {
                        goto general_sensitivity_selection;
                    }
                }
                if (sensitivity_selection == 2)
                {
                    scoped_sensitivity_selection:
                    cout << "Set a new sensitivity (1-200): " << endl;
                    cin >> scoped_sensitivity;
                    if (scoped_sensitivity > 0 && scoped_sensitivity < 200)
                    {
                        cout << "Scoped Sensitivity set to: " << scoped_sensitivity << endl;
                        goto sensitivity_settings;    
                    }
                    else 
                    {
                        goto scoped_sensitivity_selection;
                    }
                    
                }
                if (sensitivity_selection == 3)
                {
                    goto controls_settings;
                }
                if (sensitivity_selection < 1 || sensitivity_selection > 3)
                {
                    cout << "Invalid Selection." << endl;
                    goto sensitivity_settings;
                }
            }
            if (controls_settings_selection == 3)
            {
                cout << "***************" << endl;
                cout << "NOTHING ADDED YET" << endl;
                cout << "***************" << endl;
                goto controls_settings;
            }
            if (controls_settings_selection == 4)
            {
                cout << "***************" << endl;
                cout << "NOTHING ADDED YET" << endl;
                cout << "***************" << endl;
                goto controls_settings;
            }
            if (controls_settings_selection == 5)
            {
                goto all_settings;
            }
            if (controls_settings_selection < 1 || controls_settings_selection > 5)
            {
                cout << "Invalid Selection." << endl;
                goto controls_settings;
            }
        }
        if (settings_selection == 3)
        {
            cout << "***************" << endl;
            cout << "Display Settings Selected." << endl;
            //Insert settings options as needed
            display_settings:
            cout << "(1) Resolution" << endl;
            cout << "(2) Display Preference" << endl;
            cout << "(3) ----" << endl;
            cout << "(4) ----" << endl;
            cout << endl;
            cout << "(5) Exit" << endl;
            cout << "***************" << endl;
            int display_settings_selection{0};
            cin >> display_settings_selection;
            if (display_settings_selection == 1)
            {
                cout << "***************" << endl;
                cout << "Resolution Settings" << endl;
                cout << "(1) Resolution: " << resolution << endl;
                cout << endl;
                cout << "(2) Exit" << endl;
                cout << "***************" << endl;
                int resolution_selection{0};
                cin >> resolution_selection;
                if (resolution_selection == 1)
                {
                    cout << "***************" << endl;
                    cout << "Current Resolution: " << resolution << endl;
                    cout << "Set a new resolution: " << endl;
                    cout << "***************" << endl;
                    cin >> resolution;
                    cout << "Resolution has been set to: " << resolution << endl;
                    goto display_settings;
                }
                if (resolution_selection == 2)
                {
                    goto display_settings;
                }
                if (resolution_selection < 1 || resolution_selection > 2)
                {
                    cout << "Invalid Selection." << endl;
                    goto display_settings;
                }
            }
            if (display_settings_selection == 2)
            {
                cout << "***************" << endl;
                cout << "Current display preference: " << display_preference << endl;
                cout << "(1) Fullscreen" << endl;
                cout << "(2) Windowed-Fullscreen" << endl;
                cout << "(3) Windowed" << endl;
                cout << endl;
                cout << "(4) Exit" << endl;
                cout << "Select a display preference: " << endl;
                cout << "***************" << endl;
                int display_preference_selection{0};
                cin >> display_preference_selection;
                if (display_preference_selection == 1)
                {
                    cout << "Preference set to Fullscreen." << endl;
                    display_preference = "Fullscreen";
                    goto display_settings;
                }
                if (display_preference_selection == 2)
                {
                    cout << "Preference set to Windowed-Fullscreen." << endl;
                    display_preference = "Windowed-Fullscreen";
                    goto display_settings;
                }
                if (display_preference_selection == 3)
                {
                    cout << "Preference set to Windowed." << endl;
                    display_preference = "Windowed";
                    goto display_settings;
                }
                if (display_preference_selection < 1 || display_preference_selection > 3)
                {
                    cout << "Invalid Selection." << endl;
                    goto display_settings;
                }
            }
        }
        if (settings_selection == 4)
        {
            cout << "***************" << endl;
            cout << "Audio Settings Selected." << endl;
            //Insert settings options as needed
            audio_settings:
            cout << "(1) Main Volume" << endl;
            cout << "(2) Music Volume" << endl;
            cout << "(3) Sound Effects" << endl;
            cout << "(4) ----" << endl;
            cout << endl;
            cout << "(5) Exit" << endl;
            cout << "***************" << endl;
            int audio_settings_selection{0};
            cin >> audio_settings_selection;
            if (audio_settings_selection == 1)
            {
                cout << "***************" << endl;
                cout << "Main Volume is currently: " << main_volume << endl;
                enter_main_volume:
                cout << "Enter a new volume (0-100): " << endl;
                cout << "***************" << endl;
                cin >> main_volume;
                if (main_volume < 0 || main_volume > 100)
                {
                    cout << "Invalid Selection." << endl;
                    goto enter_main_volume;
                }
                if (main_volume >= 0 && main_volume <= 100)
                {
                    cout << "Main Volume has been set to: " << main_volume << endl;
                    goto audio_settings;    
                }
            }
            if (audio_settings_selection == 2)
            {
                cout << "***************" << endl;
                cout << "Music Volume is currently: " << music_volume << endl;
                enter_music_volume:
                cout << "Enter a new volume (0-100): " << endl;
                cout << "***************" << endl;
                cin >> music_volume;
                if (music_volume < 0 || music_volume > 100)
                {
                    cout << "Invalid Selection." << endl;
                    goto enter_music_volume;
                }
                if (music_volume >= 0 && music_volume <= 100)
                cout << "Music Volume has been set to: " << music_volume << endl;
                goto audio_settings;
            }
            if (audio_settings_selection == 3)
            {
                cout << "***************" << endl;
                cout << "Sound Effects Volume is currently: " << soundfx_volume << endl;
                enter_soundfx_volume:
                cout << "Enter a new volume (0-100): " << endl;
                cout << "***************" << endl;
                cin >> soundfx_volume;
                if (soundfx_volume < 0 || soundfx_volume > 100)
                {
                    cout << "Invalid Selection." << endl;
                    goto enter_soundfx_volume;
                }
                if (soundfx_volume >= 0 && soundfx_volume <= 100)
                {
                    cout << "Sound Effects Volume has been set to: " << soundfx_volume << endl;
                goto audio_settings;    
                }
            }
            if (audio_settings_selection == 4)
            {
                cout << "NOTHING ADDED YET" << endl;
                goto audio_settings;
            }
            if (audio_settings_selection == 5)
            {
                goto all_settings;
            }
            if (audio_settings_selection < 1 || audio_settings_selection > 5)
            {
                cout << "Invalid Selection." << endl;
                goto audio_settings;
            }
        }
        else
        {
            goto menu;
        }
    }
    
    //Credits
    if (menuselection == 4) 
    {
        cout << "***************" << endl;
        cout << "Credits Selected." << endl;
        cout << "Programming: Brandon Romanek" << endl;
        cout << "Summer 2019" << endl;
        cout << "***************" << endl;
        goto menu;
    }
    
    //Menu Selection Invalid
    if (menuselection < 1 || menuselection > 4)
    {
        goto menu;
    }
    
    //Game Start
    game_start:
    
    cout << "You awake in a strange room with no recollection of how you arrived there." << endl;
    cout << "There are 3 doors in the room." << endl;
    cout << "(1) Western Door" << endl;
    cout << "(2) Northern Door" << endl;
    cout << "(3) Eastern Door" << endl;
    cout << endl;
    int door_choice1{0};
    cin >> door_choice1;
    
    
    
    
    end:
    return 0;
}



